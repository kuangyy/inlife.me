<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="me.inlife.website.data.TagsMapper" >
  <resultMap id="BaseResultMap" type="me.inlife.website.model.Tags">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="simbol" jdbcType="VARCHAR" property="simbol" />
    <result column="is_hot" jdbcType="BIT" property="isHot" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, name, simbol, is_hot, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from tags
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from tags
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="me.inlife.website.model.Tags">
    insert into tags (id, name, simbol,
    is_hot, create_time, update_time
    )
    values (#{id,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{simbol,jdbcType=VARCHAR},
    #{isHot,jdbcType=BIT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
    )
  </insert>
  <insert id="insertSelective" parameterType="me.inlife.website.model.Tags">
    insert into tags
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="simbol != null">
        simbol,
      </if>
      <if test="isHot != null">
        is_hot,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="simbol != null">
        #{simbol,jdbcType=VARCHAR},
      </if>
      <if test="isHot != null">
        #{isHot,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="me.inlife.website.model.Tags">
    update tags
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="simbol != null">
        simbol = #{simbol,jdbcType=VARCHAR},
      </if>
      <if test="isHot != null">
        is_hot = #{isHot,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="me.inlife.website.model.Tags">
    update tags
    set name = #{name,jdbcType=VARCHAR},
    simbol = #{simbol,jdbcType=VARCHAR},
    is_hot = #{isHot,jdbcType=BIT},
    create_time = #{createTime,jdbcType=TIMESTAMP},
    update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>








  <select id="selectByPage" parameterType="Map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from tags
    <where>

    </where>
    ORDER BY update_time DESC ,create_time DESC
    <if test="offset != null and limit != null">
      limit #{offset},#{limit}
    </if>
  </select>
  <select id="count" parameterType="Map" resultType="int">
    select
    count(1)
    from tags
    <where>

    </where>
  </select>

  <select id="selectByPostsCount" parameterType="Map" resultType="Map">
    select t.id, t.name, t.simbol,count(r.post_id) postCount
    from tags t left join r_post_tag r on r.tag_id = t.id
    group by t.id order by postCount desc,name,simbol

    <if test="offset != null and limit != null">
      limit #{offset},#{limit}
    </if>
  </select>

  <select id="selectByPostId" parameterType="List" resultMap="BaseResultMap">
    SELECT  <include refid="Base_Column_List" /> from tags
    WHERE `id` IN
    <foreach collection="list" item="id" open="(" separator="," close=")">
      #{id}
    </foreach>
  </select>

  <select id="selectByName" parameterType="java.lang.String" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" /> from tags where name = #{name}
  </select>

</mapper>